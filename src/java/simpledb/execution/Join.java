package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Queue;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator child1, child2;
    private TupleDesc td;
    private Queue<Tuple> fits;

    /**
     * Constructor. Accepts two children to join and the predicate to join them on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // DONE: some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        TupleDesc td1 = child1.getTupleDesc(), td2 = child2.getTupleDesc();
//        int n1 = td1.numFields(), n2 = td2.numFields(), n = n1 + n2;
        td = TupleDesc.merge(td1, td2);
        fits = new LinkedList<>();
//        Type[] types = new Type[n];
//        String[] fields = new String[n];
//        for (int i = 0; i < n1; ++i) {
//            types[i] = td1.getFieldType(i);
//            fields[i] = td1.getFieldName(i);
//        }
//        for (int j = n1, i = 0; i < n2; ++i, ++j) {
//            types[j] = td2.getFieldType(i);
//            fields[j] = td2.getFieldName(i);
//        }
//        td = new TupleDesc(types, fields);
    }

    public JoinPredicate getJoinPredicate() {
        // DONE: some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by alias or table
     *         name.
     */
    public String getJoinField1Name() {
        // DONE: some code goes here
        return td.getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by alias or table
     *         name.
     */
    public String getJoinField2Name() {
        // DONE: some code goes here
        return td.getFieldName(child1.getTupleDesc().numFields() + p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // DONE: some code goes here
        return td;
    }

    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        // DONE: some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // DONE: some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // DONE: some code goes here
        child1.rewind();
        fits.clear();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more
     * tuples. Logically, this is the next tuple in r1 cross r2 that satisfies the
     * join predicate. There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join are
     * simply the concatenation of joining tuples from the left and right relation.
     * Therefore, if an equality predicate is used there will be two copies of the
     * join attribute in the results. (Removing such duplicate columns can be done
     * with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined
     * on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // DONE: some code goes here
        for (;;) {
            if (!fits.isEmpty()) {
                return fits.poll();
            }
            if (!child1.hasNext()) {
                return null;
            }
            Tuple t1 = child1.next();
            for (child2.rewind(); child2.hasNext();) {
                Tuple t2 = child2.next();
                if (p.filter(t1, t2)) {
                    Tuple t = new Tuple(td);
                    int n1 = child1.getTupleDesc().numFields();
                    int n2 = child2.getTupleDesc().numFields();
                    for (int i = 0; i < n1; ++i) {
                        t.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < n2; ++i) {
                        t.setField(i + n1, t2.getField(i));
                    }
                    fits.add(t);
                }
            }
        }
    }

    @Override
    public OpIterator[] getChildren() {
        // DONE: some code goes here
        return new OpIterator[] { child1, child2 };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // DONE: some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
